DROP TABLE RES_ELEC;

CREATE TABLE RES_ELEC AS
SELECT distinct PNT_LU_PERSON.PN_PERSON_ID
,SAT_LU_SERVICE_AGREEMENT.SA_SAT_SERV_AGREE_TYPE_ID 
,ca_char_type_id 
,ca_char_val
,ca_effective_dt
,sa.SA_SAT_SERV_AGREE_TYPE_ID  "LEVEL_PAY"
,SAT_LU_SERVICE_AGREEMENT.sa_start_dt
,SAT_LU_SERVICE_AGREEMENT.sa_end_dt
,SAT_LU_SERVICE_AGREEMENT.SA_STATUS_DESC
,CA_MAIN_BILL_ROUTE_TYPE_ID BILL_ROUTE_TYPE_ELEC
  FROM
  LOCATION.CAT_LU_CUSTOMER_ACCOUNT@ADDRESS LEFT JOIN
    bge_wh.cat_lu_customer_account_char@ADDRESS ON
    ( CAT_LU_CUSTOMER_ACCOUNT.ca_account_id=cat_lu_customer_account_char.ca_account_id and ca_char_type_id='CM-WLCRD'),
LOCATION.SAT_LU_SERVICE_AGREEMENT@ADDRESS LEFT JOIN
    LOCATION.SAT_LU_SERVICE_AGREEMENT_CHAR@ADDRESS  ON (   SAT_LU_SERVICE_AGREEMENT.sa_sa_id=SAT_LU_SERVICE_AGREEMENT_CHAR.sa_sa_id and sa_char_type_id='SALECHNL' )
    LEFT JOIN LOCATION.sat_lu_service_agreement@ADDRESS SA ON ( SAT_LU_SERVICE_AGREEMENT.ca_account_id=SA.ca_account_id and sa.SA_SAT_SERV_AGREE_TYPE_ID ='NBB_ELEC' and sa.SA_STATUS_DESC  IN  ( 'Active'  )), 
  LOCATION.FAT_BSE_CV_ACCT_SA_SP_PREM@ADDRESS,
  LOCATION.PNT_LU_PERSON@ADDRESS,
  LOCATION.PMT_LU_PREMISE@ADDRESS
WHERE
  CAT_LU_CUSTOMER_ACCOUNT.CA_ACCOUNT_VERSION_ID=FAT_BSE_CV_ACCT_SA_SP_PREM.CA_ACCOUNT_VERSION_ID  
  AND  PMT_LU_PREMISE.PM_PREMISE_ID=FAT_BSE_CV_ACCT_SA_SP_PREM.PM_PREMISE_ID  
    AND  PNT_LU_PERSON.PN_PERSON_ID=FAT_BSE_CV_ACCT_SA_SP_PREM.PN_PERSON_ID 
  AND  SAT_LU_SERVICE_AGREEMENT.SA_SERVICE_AGREEMENT_ID=FAT_BSE_CV_ACCT_SA_SP_PREM.SA_SERVICE_AGREEMENT_ID  
  AND  SAT_LU_SERVICE_AGREEMENT.SA_SAT_SERV_AGREE_TYPE_ID  IN  ( 'E-RES','E-RES-IN','PP-ECARD' )
--  AND SAT_LU_SERVICE_AGREEMENT.SA_STATUS_DESC  IN  ( 'Active'  )
  AND SAT_LU_SERVICE_AGREEMENT.SA_CURRENT_VERSION_IND_ID = 'Yes'  
  AND CAT_LU_CUSTOMER_ACCOUNT.CA_CURRENT_VERSION_IND_ID='Yes'  
    AND FAT_BSE_CV_ACCT_SA_SP_PREM.PN_MAIN_CUSTOMER_IND_ID = 'Yes';

commit;

DROP TABLE RES_GAS;

CREATE TABLE RES_GAS AS
SELECT distinct PNT_LU_PERSON.PN_PERSON_ID
,SAT_LU_SERVICE_AGREEMENT.SA_SAT_SERV_AGREE_TYPE_ID 
,sa.SA_SAT_SERV_AGREE_TYPE_ID  "LEVEL_PAY"
,SAT_LU_SERVICE_AGREEMENT.sa_start_dt
,SAT_LU_SERVICE_AGREEMENT.sa_end_dt
,SAT_LU_SERVICE_AGREEMENT.SA_STATUS_DESC 
,CA_MAIN_BILL_ROUTE_TYPE_ID BILL_ROUTE_TYPE_GAS
  FROM
  LOCATION.CAT_LU_CUSTOMER_ACCOUNT@ADDRESS ,
LOCATION.SAT_LU_SERVICE_AGREEMENT@ADDRESS LEFT JOIN
LOCATION.sat_lu_service_agreement@ADDRESS SA ON 
  ( SAT_LU_SERVICE_AGREEMENT.ca_account_id=SA.ca_account_id and sa.SA_SAT_SERV_AGREE_TYPE_ID ='NBB' and sa.SA_STATUS_DESC  IN  ( 'Active'  )), 
  LOCATION.FAT_BSE_CV_ACCT_SA_SP_PREM@ADDRESS,
  LOCATION.PNT_LU_PERSON@ADDRESS,
  LOCATION.PMT_LU_PREMISE@ADDRESS
WHERE
  CAT_LU_CUSTOMER_ACCOUNT.CA_ACCOUNT_VERSION_ID=FAT_BSE_CV_ACCT_SA_SP_PREM.CA_ACCOUNT_VERSION_ID  
  AND  PMT_LU_PREMISE.PM_PREMISE_ID=FAT_BSE_CV_ACCT_SA_SP_PREM.PM_PREMISE_ID  
    AND  PNT_LU_PERSON.PN_PERSON_ID=FAT_BSE_CV_ACCT_SA_SP_PREM.PN_PERSON_ID 
  AND  SAT_LU_SERVICE_AGREEMENT.SA_SERVICE_AGREEMENT_ID=FAT_BSE_CV_ACCT_SA_SP_PREM.SA_SERVICE_AGREEMENT_ID  
  AND  SAT_LU_SERVICE_AGREEMENT.SA_SAT_SERV_AGREE_TYPE_ID  IN  ( 'G-RES','PP-GCARD' )
--  AND SAT_LU_SERVICE_AGREEMENT.SA_STATUS_DESC  IN  ( 'Active'  )
  AND SAT_LU_SERVICE_AGREEMENT.SA_CURRENT_VERSION_IND_ID = 'Yes'  
  AND CAT_LU_CUSTOMER_ACCOUNT.CA_CURRENT_VERSION_IND_ID='Yes'  
    AND FAT_BSE_CV_ACCT_SA_SP_PREM.PN_MAIN_CUSTOMER_IND_ID = 'Yes'
;

commit;

UPDATE RES_GAS
SET SA_END_DT = '15-JUN-17'
WHERE TRIM(TO_DATE(SA_END_DT, 'DD-MON-YY')) = '01-JAN-00';


UPDATE RES_ELEC
SET SA_END_DT = TRIM(TO_DATE('15-JUN-17', 'dd-mon-yy'))
WHERE TRIM(TO_DATE(SA_END_DT, 'DD-MON-YY')) = '01-JAN-00';


COMMIT;

select count(*) from (
select count(*) cnt,PN_PERSON_ID from res_elec group by PN_PERSON_ID
)
where cnt>1;


select count(*) from (
select count(*) cnt,PN_PERSON_ID from res_gas group by PN_PERSON_ID
)
where cnt>1;

delete from res_elec e where 
CA_CHAR_VAL='INVALID'
and exists(
select * from res_elec r
where CA_CHAR_VAL='VALID'
and r.PN_PERSON_ID=e.PN_PERSON_ID
);

delete from res_elec e where 
CA_CHAR_VAL='VALID'
and exists(
select * from res_elec r
where CA_CHAR_VAL='USED'
and r.PN_PERSON_ID=e.PN_PERSON_ID
);

delete from res_elec e where 
CA_CHAR_VAL IS NULL
and exists(
select * from res_elec r
where CA_CHAR_VAL IS NOT NULL
and r.PN_PERSON_ID=e.PN_PERSON_ID
);

delete from res_elec e where 
CA_CHAR_VAL='VALID'
and exists(
select * from res_elec r
where CA_CHAR_VAL='VALID'
and r.PN_PERSON_ID=e.PN_PERSON_ID
AND R.CA_EFFECTIVE_DT<E.CA_EFFECTIVE_DT
);

delete from res_elec e where 
CA_CHAR_VAL='USED'
and exists(
select * from res_elec r
where CA_CHAR_VAL='USED'
and r.PN_PERSON_ID=e.PN_PERSON_ID
AND R.CA_EFFECTIVE_DT>E.CA_EFFECTIVE_DT
);


delete from res_elec where SA_STATUS_DESC='Canceled';
delete from res_gas where SA_STATUS_DESC='Canceled';

commit;


delete
from res_elec where 
SA_STATUS_DESC='Active'
AND
exists (select null from res_elec e where e.PN_PERSON_ID=res_elec.PN_PERSON_ID and e.SA_STATUS_DESC='Active'
AND e.SA_START_DT<res_elec.sa_start_dt)
;

delete
from res_gas where 
SA_STATUS_DESC='Active'
AND
exists (select null from res_gas e where e.PN_PERSON_ID=res_gas.PN_PERSON_ID and e.SA_STATUS_DESC='Active'
AND e.SA_START_DT<res_gas.sa_start_dt)
;

delete
from res_elec where 
SA_STATUS_DESC<>'Active'
AND
exists (select null from res_elec e where e.PN_PERSON_ID=res_elec.PN_PERSON_ID and e.SA_STATUS_DESC='Active'
);

delete
from res_gas where 
SA_STATUS_DESC<>'Active'
AND
exists (select null from res_gas e where e.PN_PERSON_ID=res_gas.PN_PERSON_ID and e.SA_STATUS_DESC='Active'
);

delete
from res_elec where 
SA_STATUS_DESC<>'Active'
AND
exists (select null from res_elec e where e.PN_PERSON_ID=res_elec.PN_PERSON_ID and e.SA_STATUS_DESC<>'Active'
AND e.SA_END_DT>res_elec.SA_END_DT);


delete
from res_elec where 
SA_STATUS_DESC<>'Active'
AND
exists (select null from res_elec e where e.PN_PERSON_ID=res_elec.PN_PERSON_ID and e.SA_STATUS_DESC<>'Active'
AND e.SA_START_DT<res_elec.SA_START_DT);

delete
from res_gas where 
SA_STATUS_DESC<>'Active'
AND
exists (select null from res_gas e where e.PN_PERSON_ID=res_gas.PN_PERSON_ID and e.SA_STATUS_DESC<>'Active'
AND e.SA_START_DT<res_gas.SA_START_DT);


delete
from res_gas where 
SA_STATUS_DESC<>'Active'
AND
exists (select null from res_gas e where e.PN_PERSON_ID=res_gas.PN_PERSON_ID and e.SA_STATUS_DESC<>'Active'
AND e.SA_END_DT>res_gas.SA_END_DT);



delete
from res_gas where 
SA_STATUS_DESC<>'Active'
AND
exists (select null from res_gas e where e.PN_PERSON_ID=res_gas.PN_PERSON_ID and e.SA_STATUS_DESC='Active'
AND e.SA_START_DT<res_gas.sa_start_dt);

delete from res_elec where SA_STATUS_DESC='Pending Start';
delete from res_gas where SA_STATUS_DESC='Pending Start';

commit;

select *
from res_elec where pn_person_id='9785327437';
----------------------------------------------------------

delete from res_elec where PN_PERSON_ID IN (
select PN_PERSON_ID from (
select count(*) cnt,PN_PERSON_ID from res_elec group by PN_PERSON_ID
)
where cnt>1);

delete from res_gas where PN_PERSON_ID IN (
select PN_PERSON_ID from (
select count(*) cnt,PN_PERSON_ID from res_gas group by PN_PERSON_ID
)
where cnt>1);

commit;

--CREATE TABLE FOR COUNTIES
create table COUNTYTABLE as 

SELECT SAT_LU_SERVICE_AGREEMENT.SA_STATUS_DESC
,SAT_LU_SERVICE_AGREEMENT.SA_END_DT
,SAT_LU_SERVICE_AGREEMENT.SA_SAT_SERV_AGREE_TYPE_ID 
,SAT_LU_SERVICE_AGREEMENT.SA_SAT_SERV_AGREE_TYPE_DESC
,CAT_LU_CUSTOMER_ACCOUNT.CA_ACCOUNT_ID
,PMT_LU_PREMISE.PM_GPRN_DESC
,PMT_LU_PREMISE.PM_MPRN_DESC
,PNT_LU_PERSON.PN_PERSON_ID
,PNT_LU_PERSON.PN_PERSON_DESC
,CAT_LU_CUSTOMER_ACCOUNT.CA_BILLING_COUNTY_DESC
,PMT_LU_PREMISE.PM_PREMISE_ID
FROM
  LOCATION.CAT_LU_CUSTOMER_ACCOUNT@ADDRESS,
  LOCATION.PMT_LU_PREMISE@ADDRESS,
  LOCATION.PNT_LU_PERSON@ADDRESS,
  LOCATION.SAT_LU_SERVICE_AGREEMENT@ADDRESS,
  LOCATION.FAT_BSE_CV_ACCT_SA_SP_PREM@ADDRESS
WHERE
  CAT_LU_CUSTOMER_ACCOUNT.CA_ACCOUNT_VERSION_ID = FAT_BSE_CV_ACCT_SA_SP_PREM.CA_ACCOUNT_VERSION_ID  
  AND  PNT_LU_PERSON.PN_PERSON_ID=FAT_BSE_CV_ACCT_SA_SP_PREM.PN_PERSON_ID  
  AND  SAT_LU_SERVICE_AGREEMENT.SA_SERVICE_AGREEMENT_ID=FAT_BSE_CV_ACCT_SA_SP_PREM.SA_SERVICE_AGREEMENT_ID  
  AND  PMT_LU_PREMISE.PM_PREMISE_ID=FAT_BSE_CV_ACCT_SA_SP_PREM.PM_PREMISE_ID  
  AND  SAT_LU_SERVICE_AGREEMENT.SA_SAT_SERV_AGREE_TYPE_ID  IN  ( 'E-RES' ,'G-RES' )
  AND SAT_LU_SERVICE_AGREEMENT.SA_STATUS_DESC  IN  ( 'Active'  )
  AND SAT_LU_SERVICE_AGREEMENT.SA_CURRENT_VERSION_IND_ID = 'Yes'  
  AND CAT_LU_CUSTOMER_ACCOUNT.CA_CURRENT_VERSION_IND_ID='Yes'  
  AND FAT_BSE_CV_ACCT_SA_SP_PREM.PN_MAIN_CUSTOMER_IND_ID = 'Yes';

SELECT COUNT(DISTINCT PN_PERSON_ID) FROM COUNTYTABLE; 

select distinct ca_billing_county_desc from countytable;  

--CONSOLIDATE IRISH SPELLING 
UPDATE COUNTYTABLE
SET ca_billing_county_desc = 'Limmerick'
WHERE ca_billing_county_desc = 'Luimnigh';

UPDATE COUNTYTABLE
SET ca_billing_county_desc = 'Kerry'
WHERE ca_billing_county_desc = 'Chiarrai';

UPDATE COUNTYTABLE
SET ca_billing_county_desc = 'Dublin'
WHERE ca_billing_county_desc = 'BhaileAthaCliatha';

UPDATE COUNTYTABLE
SET ca_billing_county_desc = 'Dublin'
WHERE ca_billing_county_desc = 'Bhaile Atha Cliatha';

UPDATE COUNTYTABLE
SET ca_billing_county_desc = 'Kildare'
WHERE ca_billing_county_desc = 'Chill Dara';

UPDATE COUNTYTABLE
SET ca_billing_county_desc = 'Galway'
WHERE ca_billing_county_desc = 'NaGaillimhe';

UPDATE COUNTYTABLE
SET ca_billing_county_desc = 'Galway'
WHERE ca_billing_county_desc = 'Na Gaillimhe';

UPDATE COUNTYTABLE
SET ca_billing_county_desc = 'Laois'
WHERE ca_billing_county_desc = 'Laoise';

UPDATE COUNTYTABLE
SET ca_billing_county_desc = 'Louth'
WHERE ca_billing_county_desc = 'Lu';

UPDATE COUNTYTABLE
SET ca_billing_county_desc = 'Kildare'
WHERE ca_billing_county_desc = 'ChillDara';

UPDATE COUNTYTABLE
SET ca_billing_county_desc = 'Tipperary'
WHERE ca_billing_county_desc = 'ThiobraidArann';

UPDATE COUNTYTABLE
SET ca_billing_county_desc = 'Offaly'
WHERE ca_billing_county_desc = 'UibhFhaili';

UPDATE COUNTYTABLE
SET ca_billing_county_desc = 'Offaly'
WHERE ca_billing_county_desc = 'Uibh Fhaili';


UPDATE COUNTYTABLE
SET ca_billing_county_desc = 'Waterford'
WHERE ca_billing_county_desc = 'PhortLairge';

UPDATE COUNTYTABLE
SET ca_billing_county_desc = 'Waterford'
WHERE ca_billing_county_desc = 'Phort Lairge';

UPDATE COUNTYTABLE
SET ca_billing_county_desc = 'Meath'
WHERE ca_billing_county_desc = 'NaHiarmhi';


UPDATE COUNTYTABLE
SET ca_billing_county_desc = 'Meath'
WHERE ca_billing_county_desc = 'NaHiarmhi';

UPDATE COUNTYTABLE
SET ca_billing_county_desc = 'Meath'
WHERE ca_billing_county_desc = 'Na Hiarmhi';

UPDATE COUNTYTABLE
SET ca_billing_county_desc = 'Cavan'
WHERE ca_billing_county_desc = 'AnChabhain';

UPDATE COUNTYTABLE
SET ca_billing_county_desc = 'Cavan'
WHERE ca_billing_county_desc = 'An Chabhain';

UPDATE COUNTYTABLE
SET ca_billing_county_desc = 'Clare'
WHERE ca_billing_county_desc = 'AnChlair';

UPDATE COUNTYTABLE
SET ca_billing_county_desc = 'Clare'
WHERE ca_billing_county_desc = 'An Chlair';


UPDATE COUNTYTABLE
SET ca_billing_county_desc = 'Mayo'
WHERE ca_billing_county_desc = 'MhaighEo';

UPDATE COUNTYTABLE
SET ca_billing_county_desc = 'Mayo'
WHERE ca_billing_county_desc = 'Mhaigh Eo';

UPDATE COUNTYTABLE
SET ca_billing_county_desc = 'Carlow'
WHERE ca_billing_county_desc = 'Cheatharlach';

UPDATE COUNTYTABLE
SET ca_billing_county_desc = 'Cork'
WHERE ca_billing_county_desc = 'Chorcai';

UPDATE COUNTYTABLE
SET ca_billing_county_desc = 'Monaghan'
WHERE ca_billing_county_desc = 'Mhuineachain';

UPDATE COUNTYTABLE
SET ca_billing_county_desc = 'Wicklow'
WHERE ca_billing_county_desc = 'ChillMhantain';

UPDATE COUNTYTABLE
SET ca_billing_county_desc = 'Wicklow'
WHERE ca_billing_county_desc = 'Chill Mhantain';

UPDATE COUNTYTABLE
SET ca_billing_county_desc = 'Limerick'
WHERE ca_billing_county_desc = 'Limmerick';

UPDATE COUNTYTABLE
SET ca_billing_county_desc = 'Offaly'
WHERE ca_billing_county_desc = 'Uibh Fhaili';

UPDATE COUNTYTABLE
SET ca_billing_county_desc = 'Sligo'
WHERE ca_billing_county_desc = 'Shligigh';

UPDATE COUNTYTABLE
SET ca_billing_county_desc = 'Donegal'
WHERE ca_billing_county_desc = 'Dhun Na NGall';

--ANY IRRELEVANT COUNTIES TO THE STUDY
DELETE FROM COUNTYTABLE
WHERE ca_billing_county_desc = 

--check counties
SELECT ca_billing_county_desc, COUNT(*)  FROM COUNTYTABLE group by ca_billing_county_desc;

commit;

--CHECK FOR DUPLICATES WITH MORE THAN 1 COUNTY 
SELECT   PN_PERSON_ID,
         COUNT(DISTINCT CA_BILLING_COUNTY_DESC) AS dupe_cnt
FROM     COUNTYTABLE
GROUP BY PN_PERSON_ID
HAVING   COUNT(DISTINCT CA_BILLING_COUNTY_DESC) > 1
ORDER BY COUNT(DISTINCT CA_BILLING_COUNTY_DESC) DESC;


--DELETE DUPLICATES - 
delete from COUNTYTABLE 
where rowid in ( select rid 
from ( select rowid rid, 
row_number() over 
( partition by PN_PERSON_ID order by rowid ) rn 
from COUNTYTABLE 
) 
where rn > 1 ); 

COMMIT;

--CHECK FOR DUPLICATES 
SELECT *
  FROM COUNTYTABLE
 WHERE (PN_PERSON_ID) IN (SELECT PN_PERSON_ID
                             FROM COUNTYTABLE
                            GROUP BY PN_PERSON_ID
                           HAVING COUNT(*) > 1)
                           ORDER BY PN_PERSON_ID;

--create table for duel fuel start and end dates
CREATE TABLE DUEL_FUEL_CHURN AS

SELECT distinct
 CT.SA_BILL_FACTOR_CODE_ID,
  CT.SA_CONTERM_START_DT,
  CT.SA_CONTERM_END_DT,  
  CAT_LU_CUSTOMER_ACCOUNT.CA_ACCOUNT_ID ACC,
  PM_COUNTY_DESC COUNTY,
  PMT_LU_PREMISE.PM_MPRN_DESC MPRN,
  PMT_LU_PREMISE.PM_GPRN_DESC GPRN,
  PNT_LU_PERSON.PN_PERSON_ID,
  PMT_LU_PREMISE.PM_PREMISE_ID,
  PNT_LU_PERSON.PN_PERSON_DESC,
  LOWER( REGEXP_REPLACE(PM_ADDRESS_1_DESC,'[^[:alpha:]]+', '')) PM_ADDRESS_1_DESC,
  PM_ADDRESS_1_DESC||' '||PM_ADDRESS_4_DESC ADDRESS,
  regexp_replace(regexp_replace(PNT_LU_PERSON.PN_HOME_PHONE_DESC,'^0+','0'),' ','') home_num,
  regexp_replace(regexp_replace(PN_MOBILE_PHONE_DESC,'^0+','0'),' ','') mobile_num 
FROM
  LOCATION.CAT_LU_CUSTOMER_ACCOUNT@ADDRESS,
  LOCATION.PMT_LU_PREMISE@ADDRESS,
  LOCATION.PNT_LU_PERSON@ADDRESS,
  LOCATION.SAT_LU_SERVICE_AGREEMENT@ADDRESS,
  LOCATION.FAT_BSE_CV_ACCT_SA_SP_PREM@ADDRESS,
  LOCATION.SAT_LU_CONTRACT_TERM@ADDRESS CT
WHERE
  CT.SA_SA_ID = SAT_LU_SERVICE_AGREEMENT.SA_SA_ID
  AND CAT_LU_CUSTOMER_ACCOUNT.CA_ACCOUNT_VERSION_ID=FAT_BSE_CV_ACCT_SA_SP_PREM.CA_ACCOUNT_VERSION_ID
  AND CT.SA_DELETED_IND_ID = 'No'
  AND CT.SA_BILL_FACTOR_CODE_ID IN ('GSDF12DS', 'GSDF24DS', 'ELDF241', 'ELDF121', 'RVDF12DS','RVDF24DS')
  AND  PNT_LU_PERSON.PN_PERSON_ID=FAT_BSE_CV_ACCT_SA_SP_PREM.PN_PERSON_ID  
  AND  SAT_LU_SERVICE_AGREEMENT.SA_SERVICE_AGREEMENT_ID=FAT_BSE_CV_ACCT_SA_SP_PREM.SA_SERVICE_AGREEMENT_ID  
  AND  PMT_LU_PREMISE.PM_PREMISE_ID=FAT_BSE_CV_ACCT_SA_SP_PREM.PM_PREMISE_ID  
  AND  SAT_LU_SERVICE_AGREEMENT.SA_SAT_SERV_AGREE_TYPE_ID  IN  ( 'G-RES')
  AND SAT_LU_SERVICE_AGREEMENT.SA_CURRENT_VERSION_IND_ID = 'Yes'  
  AND CAT_LU_CUSTOMER_ACCOUNT.CA_CURRENT_VERSION_IND_ID='Yes'  
  AND FAT_BSE_CV_ACCT_SA_SP_PREM.PN_MAIN_CUSTOMER_IND_ID = 'Yes';

commit;

--CHECK FOR DUPLICATES 
SELECT *
  FROM DUEL_FUEL_CHURN
 WHERE (PN_PERSON_ID) IN (SELECT PN_PERSON_ID
                             FROM DUEL_FUEL_CHURN
                            GROUP BY PN_PERSON_ID
                           HAVING COUNT(*) > 1)
                           ORDER BY PN_PERSON_ID;

select * from DUEL_FUEL_CHURN;                           
                           
-----------------------------------------------------------------------------------------------------                           
--check dates
select * from DUEL_FUEL_CHURN
ORDER BY SA_CONTERM_START_DT;

--Delete recirds where start date is before Duel Fuel started


--Make End Date Start date + 365 days
ALTER TABLE DUEL_FUEL_CHURN ADD DF_END_DT DATE;
UPDATE DUEL_FUEL_CHURN SET DF_END_DT = SA_CONTERM_START_DT + 365;

SELECT * FROM DUEL_FUEL_CHURN;

COMMIT;

--Select latest DF contract DATE
delete from DUEL_FUEL_CHURN e1
where DF_END_DT not in
(select max(DF_END_DT) from DUEL_FUEL_CHURN e2
where e1.PN_PERSON_ID = e2.PN_PERSON_ID );

delete from DUEL_FUEL_CHURN e1
where SA_CONTERM_START_DT not in
(select min(SA_CONTERM_START_DT) from DUEL_FUEL_CHURN e2
where e1.PN_PERSON_ID = e2.PN_PERSON_ID );

commit;
--check duplicates left
SELECT COUNT(PN_PERSON_ID) FROM DUEL_FUEL_CHURN;
SELECT COUNT (DISTINCT PN_PERSON_ID) FROM DUEL_FUEL_CHURN;


--DELETE DUPLICATES (selected the top contract)
delete from DUEL_FUEL_CHURN 
where rowid in ( select rid 
from ( select rowid rid, 
row_number() over 
( partition by PN_PERSON_ID order by rowid ) rn 
from DUEL_FUEL_CHURN 
) 
where rn > 1 ); 

COMMIT;


--CREATE TABLE TO PERSONIDS
CREATE table personlist as 

SELECT PN_PERSON_ID
FROM  RES_ELEC
UNION
SELECT PN_PERSON_ID
FROM RES_GAS
UNION
SELECT PN_PERSON_ID
FROM BOILER_DETAIL
UNION
SELECT PN_PERSON_ID
FROM COUNTYTABLE
UNION
SELECT PN_PERSON_ID
FROM DUEL_FUEL_CHURN;

SELECT * FROM PERSONLIST;

--create table for channels - union
CREATE TABLE CHANNELPERSONS AS 
SELECT PN_PERSON_ID AS PERSONID, USER_GROUPS AS CHANNEL, EN_START_DT AS CHAN_DATE
FROM CHANNEL_ELEC_COS
UNION
SELECT PN_PERSON_ID AS PERSONID, USER_GROUPS AS CHANNEL, EN_START_DT AS CHAN_DATE
FROM CHANNEL_GAS_COS
UNION
SELECT  PN_PERSON_ID AS PERSONID, USER_GROUPS AS CHANNEL, EN_START_DT AS CHAN_DATE
FROM CHANNEL_ELEC_COLE
UNION
SELECT PN_PERSON_ID, USER_GROUPS, EN_START_DT
FROM CHANNEL_GAS_COT;

--make table without dupes
CREATE TABLE CHANNELPERSONS2 AS 

SELECT DISTINCT PERSONID AS PERSONID
,MAX(CHAN_DATE) CHAN_DATE
,CHANNEL AS CHANNEL
FROM CHANNELPERSONS
GROUP BY PERSONID, CHAN_DATE, CHANNEL;

--DELETE DUPLICATES WITH LOWEST DATE
delete from CHANNELPERSONS2 e1
where CHAN_DATE not in
(select max(CHAN_DATE) from CHANNELPERSONS2 e2
where e1.PERSONID = e2.PERSONID );

--delete records associated with staff members

--FIX MISSPELLED GROUPS

--CHECK DUPLICATES
SELECT *
  FROM CHANNELPERSONS2
 WHERE (PERSONID) IN (SELECT PERSONID
                             FROM CHANNELPERSONS2
                            GROUP BY PERSONID
                           HAVING COUNT(*) > 1)
                           ORDER BY PERSONID;


						   
--DELETE DUPLICATES WITH SAME DATE - SELECT HIGHEST 
delete from CHANNELPERSONS2 
where rowid in ( select rid 
from ( select rowid rid, 
row_number() over 
( partition by PERSONID order by rowid ) rn 
from CHANNELPERSONS2 
) 
where rn > 1 ); 


COMMIT;

CREATE TABLE BOOST_COUNT_12MONTH AS

SELECT COUNT(DENOMINATION) AS BOOST_COUNT_12MONTH
  ,V.user_id 
  ,CB.CCB_PERSON_ID
  from  voucher@ESWEBSP2.ES.IE V
  JOIN beaconp1.user_ccb_person@ESWEBSP2.ES.IE CB ON CB.user_id = V.user_id
  WHERE V.status='REDEEMED' 
  AND DATE_REDEEMED > TRIM(TO_DATE('15-JUN-16', 'dd mon yy'))
  AND DATE_REDEEMED < TRIM(TO_DATE('15-JUN-17', 'dd mon yy'))
  group by V.user_id, CB.CCB_PERSON_ID;



--CREATE TABLE
CREATE TABLE CHURN_ANALYSIS AS 

SELECT PERSONLIST.PN_PERSON_ID AS PERSONID
,RES_ELEC.SA_START_DT as ELEC_START
,RES_ELEC.SA_END_DT as ELEC_END
,RES_ELEC.SA_STATUS_DESC AS ELEC_SA_STATUS
,RES_GAS.SA_STATUS_DESC AS GAS_SA_STATUS
,RES_GAS.SA_START_DT as GAS_START
,RES_GAS.SA_END_DT as GAS_END
,BOILER_DETAIL.CNT AS NUMBER_BOILER_SERVICE
,BOILER_DETAIL.DT AS LAST_SERVICE_DT
,BOILER_DETAIL.FA_TYPE_DESC AS BCONTRACT_TYPE
,RES_ELEC.CA_CHAR_TYPE_ID as WILDCARD
,RES_ELEC.CA_CHAR_VAL as WILDCARD_USED
,RES_ELEC.CA_EFFECTIVE_DT as WILDCARD_DATE
,RES_ELEC.LEVEL_PAY AS ELEC_LEVELPAY
,RES_ELEC.BILL_ROUTE_TYPE_ELEC AS PAPERLESS_ELEC
,RES_GAS.LEVEL_PAY AS GAS_LEVELPAY
,RES_GAS.BILL_ROUTE_TYPE_GAS AS PAPERLESS_GAS
,RES_SEG_PN.SEGMENT AS SEGMENT
,COUNTYTABLE.CA_BILLING_COUNTY_DESC AS COUNTY
,DUEL_FUEL_CHURN.SA_CONTERM_START_DT AS DF_START_DT
,DUEL_FUEL_CHURN.DF_END_DT AS DF_END_DT
,CHANNELPERSONS2.CHANNEL 
,CHANNELPERSONS2.CHAN_DATE
,REWARDS_20170615.CCB_PERSON_ID
,REWARDS_20170615.LOGIN_ID
,REWARDS_20170615.USER_ID
,REWARDS_20170615.REGISTERED_DATE
,REWARDS_20170615.REWARDS_20170615.SMS_OPT_IN_VALUE
,REWARDS_20170615.EMAIL_OPT_IN_VALUE
,REWARDS_20170615.REGISTRATION_STATUS
,REWARDS_20170615.FIRST_LOGIN
,REWARDS_20170615.FORCE_CHANGE_PWD
,REWARDS_20170615.USER_STATUS
,REWARDS_20170615.REWARDS_PROFILE_ID
,REWARDS_20170615.BOOST_AMOUNT
,REWARDS_20170615.BOOST_AMOUNT_12MNTH
,REWARDS_20170615.TESCO_CLUBCARD
,REWARDS_20170615.PASSCODE_CNT
,REWARDS_20170615.PASSCODE_CNT12
,BOOST_COUNT_12MONTH.BOOST_COUNT_12MONTH
FROM PERSONLIST
LEFT JOIN RES_ELEC ON RES_ELEC.PN_PERSON_ID = PERSONLIST.PN_PERSON_ID
LEFT JOIN RES_SEG_PN ON RES_SEG_PN.PN_PERSON_ID = PERSONLIST.PN_PERSON_ID
LEFT JOIN RES_GAS ON RES_GAS.PN_PERSON_ID = PERSONLIST.PN_PERSON_ID
LEFT JOIN BOILER_DETAIL ON BOILER_DETAIL.PN_PERSON_ID = PERSONLIST.PN_PERSON_ID
LEFT JOIN COUNTYTABLE ON COUNTYTABLE.PN_PERSON_ID = PERSONLIST.PN_PERSON_ID
LEFT JOIN DUEL_FUEL_CHURN ON DUEL_FUEL_CHURN.PN_PERSON_ID = PERSONLIST.PN_PERSON_ID
LEFT JOIN CHANNELPERSONS2 ON CHANNELPERSONS2.personid = PERSONLIST.PN_PERSON_ID
LEFT JOIN REWARDS_20170615 ON REWARDS_20170615.CCB_PERSON_ID = LPAD(PERSONLIST.PN_PERSON_ID,10,'0')
LEFT JOIN BOOST_COUNT_12MONTH ON BOOST_COUNT_12MONTH.CCB_PERSON_ID = LPAD(PERSONLIST.PN_PERSON_ID,10,'0');

COMMIT;


--CHECK DUPLICATES
SELECT count(*) FROM CHURN_ANALYSIS
 WHERE (PERSONID) IN (SELECT PERSONID
                             FROM CHURN_ANALYSIS
                            GROUP BY PERSONID
                           HAVING COUNT(*) > 1);

SELECT COUNT(*) FROM CHURN_ANALYSIS; 
SELECT COUNT(*) FROM CHURN_ANALYSIS WHERE DF_START_DT IS NOT NULL; -


--DELETING DUPLICATE SA'S LIKE WE DID FOR STUDY 1

DELETE FROM CHURN_ANALYSIS
  WHERE (GAS_START IS NULL
  AND ELEC_START IS NULL
  AND GAS_END IS NULL 
  AND ELEC_END IS NULL);


commit;

--add competitions data
ALTER TABLE CHURN_ANALYSIS ADD COMPS_ENTERED_12MNTHS NUMBER;
  MERGE INTO CHURN_ANALYSIS a 
  USING (SELECT PERSON_ID, COUNT(PERSON_ID) COMPS_ENTERED_12MNTHS  FROM PERSONS_LIST GROUP BY PERSON_ID) b
  ON (a.PERSONID = b.PERSON_ID)
  WHEN MATCHED THEN UPDATE SET a.COMPS_ENTERED_12MNTHS = b.COMPS_ENTERED_12MNTHS;

--FIX DATES

UPDATE CHURN_ANALYSIS
SET ELEC_END =  TRIM(TO_DATE('15-JUN-17', 'dd mon yy'))
where TRIM(TO_DATE(ELEC_END, 'DD-MON-YY')) > '15-JUN-17';

UPDATE CHURN_ANALYSIS
SET GAS_END =  TRIM(TO_DATE('15-JUN-17', 'dd mon yy'))
where TRIM(TO_DATE(GAS_END, 'DD-MON-YY')) > '15-JUN-17';

UPDATE CHURN_ANALYSIS
SET PAPERLESS_ELEC = NULL
WHERE ELEC_START > '15-JUN-17';

UPDATE CHURN_ANALYSIS
SET ELEC_LEVELPAY = NULL
WHERE ELEC_START > '15-JUN-17';

UPDATE CHURN_ANALYSIS
SET WILDCARD_DATE = NULL
WHERE ELEC_START > '15-JUN-17';

UPDATE CHURN_ANALYSIS
SET WILDCARD_USED = NULL
WHERE ELEC_START > '15-JUN-17';

UPDATE CHURN_ANALYSIS
SET WILDCARD = NULL
WHERE ELEC_START > '15-JUN-17';

UPDATE CHURN_ANALYSIS
SET ELEC_SA_STATUS = NULL
WHERE ELEC_START > '15-JUN-17';

UPDATE CHURN_ANALYSIS
SET ELEC_END = NULL
WHERE ELEC_START > '15-JUN-17';

UPDATE CHURN_ANALYSIS
SET ELEC_START = NULL
WHERE ELEC_START > '15-JUN-17';

UPDATE CHURN_ANALYSIS
SET PAPERLESS_GAS = NULL
WHERE GAS_START > '15-JUN-17';

UPDATE CHURN_ANALYSIS
SET GAS_LEVELPAY = NULL
WHERE GAS_START > '15-JUN-17';

UPDATE CHURN_ANALYSIS
SET GAS_SA_STATUS = NULL
WHERE GAS_START > '15-JUN-17';

UPDATE CHURN_ANALYSIS
SET GAS_END = NULL
WHERE GAS_START > '15-JUN-17';

UPDATE CHURN_ANALYSIS
SET GAS_START = NULL
WHERE GAS_START > '15-JUN-17';

COMMIT;

--CREATE CHURN VARIABLE
ALTER TABLE CHURN_ANALYSIS ADD CHURNED NUMBER;
  UPDATE CHURN_ANALYSIS SET CHURNED = (CASE WHEN ((ELEC_END = TRIM(TO_DATE('15-JUN-17', 'dd mon yy'))) OR (GAS_END =  TRIM(TO_DATE('15-JUN-17', 'dd mon yy'))))
    THEN 0 ELSE 1 END);

COMMIT;

--CREATE NEW VARIABLES FOR ANALYSIS
--Add start date/end date/days customer  
ALTER TABLE CHURN_ANALYSIS ADD START_DATE DATE;
  UPDATE CHURN_ANALYSIS SET START_DATE = (CASE WHEN ELEC_START < GAS_START AND ELEC_START IS NOT NULL THEN ELEC_START
    WHEN GAS_START IS NULL THEN ELEC_START
    ELSE GAS_START END);

ALTER TABLE CHURN_ANALYSIS ADD END_DATE DATE;
  UPDATE CHURN_ANALYSIS SET END_DATE = (CASE WHEN ELEC_END > GAS_END AND ELEC_END IS NOT NULL THEN ELEC_END
    WHEN GAS_END IS NULL THEN ELEC_END
    ELSE GAS_END END);

--calculate days customer
ALTER TABLE CHURN_ANALYSIS ADD DAYS_CUST NUMBER;
  UPDATE CHURN_ANALYSIS SET DAYS_CUST = (END_DATE - START_DATE);


SELECT * FROM CHURN_ANALYSIS WHERE DAYS_CUST < 0;
--binary variables
ALTER TABLE CHURN_ANALYSIS ADD BOILER_SERVICE NUMBER;
  UPDATE CHURN_ANALYSIS SET BOILER_SERVICE = (CASE WHEN (LAST_SERVICE_DT >= TRUNC(END_DATE) - 426) THEN 1 ELSE 0 END);

--(not using days elec or gas customer as it will be too highly correllated with other variables)
--calculate whether rewards
ALTER TABLE CHURN_ANALYSIS ADD REWARDS number(38);
  UPDATE CHURN_ANALYSIS SET REWARDS = (CASE when REGISTERED_DATE IS NOT NULL THEN 1 ELSE 0 END);

--calculate whether customers are on 1st year discount or past it and still customers
ALTER TABLE CHURN_ANALYSIS ADD PAST_1ST_YR_DISC number(38);
  UPDATE CHURN_ANALYSIS SET PAST_1ST_YR_DISC = (case when DAYS_CUST > 365 then 1 else 0 end);

--add gas customer
ALTER TABLE CHURN_ANALYSIS ADD GAS_CUST NUMBER;
  UPDATE CHURN_ANALYSIS SET GAS_CUST = (CASE WHEN (GAS_END = END_DATE) THEN 1 ELSE 0 END);
  
--add elec customer
ALTER TABLE CHURN_ANALYSIS ADD ELEC_CUST NUMBER;
  UPDATE CHURN_ANALYSIS SET ELEC_CUST = (CASE WHEN (ELEC_END = END_DATE) THEN 1 ELSE 0 END);

---calculate levelpay
ALTER TABLE CHURN_ANALYSIS ADD LEVELPAY number(38);
  UPDATE CHURN_ANALYSIS SET LEVELPAY = (case when ELEC_LEVELPAY = 'NBB_ELEC' or GAS_LEVELPAY = 'NBB' then 1 else 0 end);

--calculate paperless
ALTER TABLE CHURN_ANALYSIS ADD PAPERLESS number(38);
  UPDATE CHURN_ANALYSIS SET PAPERLESS = (case when PAPERLESS_ELEC = 'PAPLESS' or PAPERLESS_GAS = 'PAPLESS' then 1 else 0 end);

--calculate clubcard
ALTER TABLE CHURN_ANALYSIS ADD CLUBCARD number(38);
  UPDATE CHURN_ANALYSIS SET CLUBCARD = (case when TESCO_CLUBCARD IS NOT NULL THEN 1 ELSE 0 end);

--add days elec
ALTER TABLE CHURN_ANALYSIS ADD DAYS_ELEC NUMBER;
  UPDATE CHURN_ANALYSIS SET DAYS_ELEC = (ELEC_END - ELEC_START);
  
--add days gas
ALTER TABLE CHURN_ANALYSIS ADD DAYS_GAS NUMBER;
  UPDATE CHURN_ANALYSIS SET DAYS_GAS = (GAS_END - GAS_START);
  

--REMOVE DUEL FUEL CONTRACTS WITHOUT ELEC & GAS CONTRACTS
UPDATE CHURN_ANALYSIS 
SET DF_END_DT = NULL
WHERE (ELEC_START IS NULL OR GAS_START IS NULL)
AND DF_START_DT IS NOT NULL;

UPDATE CHURN_ANALYSIS 
SET DF_START_DT = NULL
WHERE (ELEC_START IS NULL OR GAS_START IS NULL)
AND DF_START_DT IS NOT NULL;


--calculate df_discount
ALTER TABLE CHURN_ANALYSIS ADD DF_DISCOUNT number(38);
  UPDATE CHURN_ANALYSIS SET DF_DISCOUNT = (case when DF_END_DT IS NOT NULL
                                               AND DF_END_DT >= END_DATE
                                               then 1 else 0 end);

COMMIT;                                           
                                               

--ADD EVER REGISTERED INTO REWARDS
ALTER TABLE CHURN_ANALYSIS ADD REWARDS_REG number(38);
  UPDATE CHURN_ANALYSIS SET REWARDS_REG = (case when REGISTERED_DATE IS NOT NULL then 1 else 0 end);

--ADD EVER LOGGED IN
ALTER TABLE CHURN_ANALYSIS ADD REWARDS_LOGIN number(38);
  UPDATE CHURN_ANALYSIS SET REWARDS_LOGIN = (case when FIRST_LOGIN = 'Y' then 1 else 0 end);

commit; 
--add active rewards
ALTER TABLE CHURN_ANALYSIS ADD INACTIVE_REWARDS number;
  UPDATE CHURN_ANALYSIS SET INACTIVE_REWARDS = (case when REGISTERED_DATE IS NOT NULL 
                                                AND (FIRST_LOGIN = 'N' OR FIRST_LOGIN IS NULL)
                                                AND (BOOST_AMOUNT_12MNTH = 0 OR BOOST_AMOUNT_12MNTH IS NULL)
                                                AND TESCO_CLUBCARD IS NULL
                                                AND (PASSCODE_CNT12 = 0 OR PASSCODE_CNT12 IS NULL)
                                                AND (BOOST_COUNT_12MONTH = 0 OR BOOST_COUNT_12MONTH IS NULL)
                                                AND COMPS_ENTERED_12MNTHS IS NULL
                                                then 1 else 0 end);

                                          
                                                
--turn quantitative variables into dummy variables
ALTER TABLE CHURN_ANALYSIS ADD USED_BOOST_12MNTH number(38);
  UPDATE CHURN_ANALYSIS SET USED_BOOST_12MNTH = (CASE when BOOST_COUNT_12MONTH > 0 THEN 1 ELSE 0 END);
  
--turn quantitative variables into dummy variables
ALTER TABLE CHURN_ANALYSIS ADD USED_BOOST_12MNTH_v2 number(38);
  UPDATE CHURN_ANALYSIS SET USED_BOOST_12MNTH_v2 = (CASE when BOOST_AMOUNT_12MNTH > 0 THEN 1 ELSE 0 END);  
  
--test if both match
select * from CHURN_ANALYSIS where USED_BOOST_12MNTH IS NULL;
and USED_BOOST_12MNTH = 1;

COMMIT;

ALTER TABLE CHURN_ANALYSIS ADD USED_THEATRE_12MNTH number(38);
  UPDATE CHURN_ANALYSIS SET USED_THEATRE_12MNTH = (CASE WHEN PASSCODE_CNT12 > 0 THEN 1 ELSE 0 END);
        
ALTER TABLE CHURN_ANALYSIS ADD ENTERED_COMP_12MNTH number(38);
  UPDATE CHURN_ANALYSIS SET ENTERED_COMP_12MNTH = (CASE when COMPS_ENTERED_12MNTHS > 0 THEN 1 ELSE 0 END);

ALTER TABLE CHURN_ANALYSIS ADD GAS_ONLY number(38);
  UPDATE CHURN_ANALYSIS SET GAS_ONLY = 
    (CASE when GAS_END >= (END_DATE - 60) 
    and (ELEC_END <= (END_DATE - 60) OR ELEC_END IS NULL)
    THEN 1 ELSE 0 END);
                                              
ALTER TABLE CHURN_ANALYSIS ADD ELEC_ONLY number(38);
  UPDATE CHURN_ANALYSIS SET ELEC_ONLY = 
    (CASE WHEN ELEC_END >= (END_DATE - 60)
    AND (GAS_END <= (END_DATE - 60) or  GAS_END IS NULL)    
    THEN 1 ELSE 0 END);          

                                            
ALTER TABLE CHURN_ANALYSIS ADD GASELEC_NODISCOUNT number(38);
  UPDATE CHURN_ANALYSIS SET GASELEC_NODISCOUNT = 
    (CASE when ELEC_END >= (END_DATE - 60)
    AND GAS_END >= (END_DATE - 60) 
    AND DF_DISCOUNT = 0
    THEN 1 ELSE 0 END);       
    
--add for people that use theatre but not Tesco
ALTER TABLE CHURN_ANALYSIS ADD THEATRE_NOT_TESCO number(38);
  UPDATE CHURN_ANALYSIS SET THEATRE_NOT_TESCO = (CASE WHEN PASSCODE_CNT12 > 0
    AND BOOST_COUNT_12MONTH = 0
    AND CLUBCARD = 0
    THEN 1 ELSE 0 END);

--add for people that use theatre but not Tesco
ALTER TABLE CHURN_ANALYSIS ADD TESCO_NOT_THEATRE number(38);
  UPDATE CHURN_ANALYSIS SET TESCO_NOT_THEATRE = CASE WHEN PASSCODE_CNT12 = 0
                                              AND (BOOST_COUNT_12MONTH  > 0
                                              OR CLUBCARD = 1)
                                              THEN 1 ELSE 0 END;    
                                                                                          
ALTER TABLE CHURN_ANALYSIS ADD CLUBCARD_ONLY number(38);
  UPDATE CHURN_ANALYSIS SET CLUBCARD_ONLY = CASE WHEN PASSCODE_CNT12 = 0
                                              AND BOOST_COUNT_12MONTH = 0
                                              AND CLUBCARD = 1
                                              THEN 1 ELSE 0 END;   
 
commit;
                                              
ALTER TABLE CHURN_ANALYSIS ADD CC_AND_BOOST_ONLY number(38);
  UPDATE CHURN_ANALYSIS SET CC_AND_BOOST_ONLY = CASE WHEN PASSCODE_CNT12 = 0
                                              AND BOOST_COUNT_12MONTH = 1
                                              AND CLUBCARD = 1
                                              THEN 1 ELSE 0 END;                                                 

--add for people that have used Wilcard
ALTER TABLE CHURN_ANALYSIS ADD USED_WILDCARD number(38);
  UPDATE CHURN_ANALYSIS SET USED_WILDCARD = (CASE WHEN WILDCARD_USED = 'USED' THEN 1 ELSE 0 END);

--add rewards variable
ALTER TABLE CHURN_ANALYSIS ADD REWARDS_USAGE number;
  UPDATE CHURN_ANALYSIS SET REWARDS_USAGE = CASE when PASSCODE_CNT12 > 1
                                              OR BOOST_COUNT_12MONTH > 1
                                              OR COMPS_ENTERED_12MNTHS IS NOT NULL
                                              THEN 1 ELSE 0 END;

commit;
--DELETE ANOMOLIES
DELETE FROM CHURN_ANALYSIS
WHERE DAYS_CUST = 0;

--REMOVE NULLS
UPDATE CHURN_ANALYSIS
SET BOOST_AMOUNT = 0
WHERE BOOST_AMOUNT IS NULL;

UPDATE CHURN_ANALYSIS
SET BOOST_AMOUNT_12MNTH = 0
WHERE BOOST_AMOUNT_12MNTH IS NULL;

UPDATE CHURN_ANALYSIS
SET BOOST_COUNT_12MONTH = 0
WHERE BOOST_COUNT_12MONTH IS NULL;

UPDATE CHURN_ANALYSIS
SET COMPS_ENTERED_12MNTHS = 0
WHERE COMPS_ENTERED_12MNTHS IS NULL;

UPDATE CHURN_ANALYSIS
SET PASSCODE_CNT = 0
WHERE PASSCODE_CNT IS NULL;

UPDATE CHURN_ANALYSIS
SET PASSCODE_CNT12 = 0
WHERE PASSCODE_CNT12 IS NULL;

UPDATE CHURN_ANALYSIS
SET DAYS_ELEC = 0
WHERE DAYS_ELEC IS NULL;

UPDATE CHURN_ANALYSIS
SET DAYS_GAS = 0
WHERE DAYS_GAS IS NULL;

UPDATE CHURN_ANALYSIS
SET NUMBER_BOILER_SERVICE = 0
WHERE NUMBER_BOILER_SERVICE IS NULL;

COMMIT; 

--remove spaces from variables
UPDATE CHURN_ANALYSIS
SET COUNTY = REGEXP_REPLACE(COUNTY, '[[:space:]]*','');

UPDATE CHURN_ANALYSIS
SET SEGMENT = REGEXP_REPLACE(SEGMENT, '[[:space:]]*','');

UPDATE CHURN_ANALYSIS
SET CHANNEL = REGEXP_REPLACE(CHANNEL, '[[:space:]]*','');


ALTER TABLE CHURN_ANALYSIS ADD DAYS_DF NUMBER;
  UPDATE CHURN_ANALYSIS SET DAYS_DF = DF_END_DT - DF_START_DT;
  

COMMIT;

--TESTING DATA

SELECT COUNT(*) FROM CHURN_ANALYSIS;
SELECT COUNT(DISTINCT PERSONID) FROM CHURN_ANALYSIS;

--Getting random data
SELECT  *
FROM    (
        SELECT  *
        FROM    CHURN_ANALYSIS
        ORDER BY
                dbms_random.value
        )
WHERE rownum <= 10;

--Checking all the tables
